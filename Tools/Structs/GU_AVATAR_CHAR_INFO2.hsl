/*****************************************************************************
 * filesystems.hsl - Structure definitions for file system related entities.
 *     This presently includes the MBR, and BOOTSECTORs for FAT16, FAT32, and
 *     NTFS.
 *  
 * Copyright (c) 2003-2008 BreakPoint Software, Inc.  All Rights Reserved
 *
 *****************************************************************************
 * Revision History:
 *  05/01/03 - RJA - Original
 *  10/16/07 - RJA - Formatting tweaks, use blob for ByteCode
 *  12/16/09 - RJA - Added enumsign pragmas
 */

#include "standard-types.hsl"
struct sPC_SHAPE
{
	BYTE			byFace;
	BYTE			byHair;
	BYTE			byHairColor;
	BYTE			bySkinColor;
}sPC_SHAPE;

struct sAVATAR_ATTRIBUTE
{
WORD byBaseStr;
	WORD Str; //absolute
	WORD byBaseCon;
	WORD Con; //absolute
	WORD byBaseFoc;
	WORD Foc; //absolute
	WORD byBaseDex;
	WORD Dex; //absolute
	WORD byBaseSol;
	WORD Sol; //absolute
	WORD byBaseEng;
	WORD Eng; //absolute

	DWORD wBaseMaxLP;
	int MaxLp; //absolute
	WORD wBaseMaxEP;
	WORD wMaxEP; //absolute
	DWORD wBaseMaxAp;
	int MaxAp; //absolute
	WORD wBaseMaxRP;
	WORD wMaxRP; //absolute
	WORD wBaseLpRegen;
	WORD wLpRegen; //absolute
	WORD wBaseLpSitDownRegen;
	WORD wLpSitdownRegen; //absolute
	WORD wBaseLpBattleRegen;
	WORD wLpBattleRegen; //absolute

	WORD wBaseEpRegen;
	WORD wEpRegen; //absolute
	WORD wBaseEpSitdownRegen;
	WORD wEpSitdownRegen; //absolute
	WORD wBaseEpBattleRegen;
	WORD wEpBattleRegen; //absolute

	WORD wBaseApRegen;
	WORD wApRegen; //absolute
	WORD wBaseApSitdownRegen;
	WORD wApSitdownRegen; //absolute
	WORD wBaseApBattleRegen;
	WORD wLastApBattleRegen;

	WORD wBaseApDegen;
	WORD wApDegen; //absolute
	WORD wBaseApBattleDegen;
	WORD wLastApBattleDegen;

	WORD wBaseRpRegen;
	WORD wRpRegen; //absolute		RP rate increase. (/ Second)
	WORD wRpDimimutionRate;			//RP °¨¼Ò ¼Óµµ.(/second)

	WORD wBasePhysicalOffence;
	WORD wPhysicalOffence; //absolute
	WORD wBasePhysicalDefence;
	WORD wPhysicalDefence; //absolute

	WORD wBaseEnergyOffence;
	WORD wEnergyOffence; //absolute
	WORD wBaseEnergyDefence;
	WORD wEnergyDefence; //absolute

	WORD wBaseAttackRate;
	WORD wAttackRate; //percent
	WORD wBaseDodgeRate;
	WORD wDodgeRate; //percent
	WORD wBaseBlockRate;
	WORD wBlockRate; //percent

	WORD wBaseCurseSuccessRate;
	WORD wCurseSuccessRate; //percent
	WORD wBaseCurseToleranceRate;
	WORD wCurseToleranceRate; //percent

	WORD wBaseBlockDamageRate;
	WORD wBlockDamageRate; //percent //colocar en otro lado

	WORD wBasePhysicalCriticalRate;
	WORD wPhysicalCriticalRate; //percent
	WORD wBaseEnergyCriticalRate;
	WORD wEnergyCriticalRate; //percent

	float fBasePhysicalCriticalRange;
	float fPhysicalCriticalDamageRate; //percent
	float fBaseEnergyCriticalDamageRange;
	float fEnergyCriticalDamageRate; //percent

	float fBaseRunSpeed;
	float fRunSpeed; //absolute

	float fBaseAirSpeed;
	float fFlySpeed; //absolute
	float fBaseAirDashSpeed;
	float fFlyDashSpeed; //absolute
	float fBaseAirDashSpeed2;
	float fFlyAccelSpeed; //absolute

	WORD wBaseAttackSpeedRate;
	WORD wAttackSpeedRate; //absolute
	float fBaseAttackRange;
	float fAttackRange; //absolute


	float fCastingTimeChangePercent; //percent
	float fCoolTimeChangePercent; //percent
	float fKeepTimeChangePercent; //percent
	float fKeepTimeChangeSeconds;
	//float fDotTimeChangeAbsolute; //absolute
	float fRequiredEpChangePercent; //percent

	float fHonestOffence;
	float fHonestDefence;
	float fStrangeOffence;
	float fStrangeDefence;
	float fWildOffence;
	float fWildDefence;
	float fEleganceOffence;
	float fEleganceDefence;
	float fFunnyOffence;
	float fFunnyDefence;

	float fDotTimeChangeAbsolute; //absolute
	float fDotValueChangePercent;

	WORD wParalyzeToleranceRate;	//percent
	WORD wTerrorToleranceRate;	//percent
	WORD wConfuseToleranceRate;	//percent
	WORD wStoneToleranceRate;	//percent
	WORD wCandyToleranceRate;	//percent

	float fParalyzeKeepTimeDown;	//percent
	float fTerrorKeepTimeDown;	//percent
	float fConfuseKeepTimeDown;	//percent
	float fStoneKeepTimeDown;	//percent
	float fCandyKeepTimeDown;	//percent
	float fBleedingKeepTimeDown;	//percent
	float fPoisonKeepTimeDown;	//percent
	float fStomachacheKeepTimeDown;	//percent

	float fCriticalBlockSuccessRate;	//percent

	WORD wGuardRate;
	
	float fSkillDamageBlockModeSuccessRate;
	float fCurseBlockModeSuccessRate;
	float fKnockdownBlockModeSuccessRate;

	BYTE byExpBooster;
	BYTE byQuestDropRate;

	//DWORD dwLpRecoveryWhenHit; //absolute
	//float fLpRecoveryWhenHitInPercent;	//percent

	WORD baseAbdominalPainDefence;
	WORD wStomachacheDefence;
	WORD wBasePoisonDefence;
	WORD wPoisonDefence;
	WORD wBaseBleedDefence;
	WORD wBleedDefence;
	WORD wBaseBurnDefence;
	WORD wBurnDefence;

	float fEnergyCriticalDamageBonusRate;
	float fItemUpgradeBonusRate;
	float fItemUpgradeBreakBonusRate;

	float fHtbBlockModeSuccessRate;

	float fPhysicalCriticalDefenceRate;// decreases critical dmg bonus
	float fEnergyCriticalDefenceRate;// decreases critical dmg bonus
	float fBaseSkillSpeed;
	float fSkillAnimationSpeedModifier;

	//float fMindCurseImmunity;
	//float fBodyCurseImmunity; 
	//float fChangeCurseImmunity;
	//float fSkillAnimationSpeedModifier;

	DWORD dwBaseMaxWeight;
	DWORD dwWeightLimit;

	float fSkillAggroBonus;
	float fSkillAggroBonusInPercent;
	float fMindCurseImmunity;
	float fBodyCurseImmunity;
	float fChangeCurseImmunity;

	float fPhysicalArmorPenRate; //Decreases x% of target physical def. Note: stat should never be below 0
	float fEnergyArmorPenRate; //Decreases x% of target energy def. Note: stat should never be below 0
	float fDirectHealPowerBonus;
	float fDirectHealPowerBonusInPercent;
	float fHotPowerBonus;
	float fHotPowerBonusInPercent;
	//float fDotValueChangePercent;
	float fPhysicalReflection; //absolute mover a otro lugar
	float fEnergyReflection; //absolute mover a otro lugar
	DWORD dwLpRecoveryWhenHit; //absolute
	float fLpRecoveryWhenHitInPercent; //absolute
	WORD dwEpRecoveryWhenHit; //absolute move
	float fEpRecoveryWhenHitInPercent;	//percent move
}sAVATAR_ATTRIBUTE;

struct sMARKING
{
	DWORD dwCode;			// eMARKING_TYPE
}sMARKING;//end of sMARKING

struct sHOIPOIMIX_DATA
{
	//bool			bNormalStart;	// ��ֵ�Ͽ��� // ����Ʈ ���� Ȥ�� ����

	bool			bNormalStart;	// ��ֵ�Ͽ��� // ����Ʈ ���� Ȥ�� ����

	bool			bSpecialStart;	// ���伣 �ͽ� ��Ͽ���
	BYTE			bySpecialType;	// eRECIPE_TYPE
	BYTE			byLevel;	// level
	DWORD			dwExp;		// current exp	dwMixExp;

	//BYTE			byNormalLevel;	 
	//DWORD			dwNormalExp;
	//BYTE			bySpecialLevel; 	
	//DWORD			dwSpecialExp;
}sHOIPOIMIX_DATA;

struct sPC_PROFILE_LOCALIZE
{
	BYTE type;
	DWORD netp;// Token Point correct value
	DWORD GiftCash;// Notify if recive cash item from friend "mensage say gift not confirmed"
	BYTE unknown;// Unknow TW
	BYTE IsVip;// S icon Maybe Vip_Member
	BYTE unknown1;// Unknow TW
	BYTE unknown2;// Unknow TW
	BYTE unknown3;// Unknow TW
	DWORD unknown4;// Unknow TW
	DWORD mascot;// INVALID_TBLIDX TW
	BYTE unknown6;// INVALID_TBLIDX TW
	DWORD WP_Point;// WP Poit mensage
	BYTE unknown7;// Unknow TW
}sPC_PROFILE_LOCALIZE;
struct new
{
BYTE type;
DWORD netp;
DWORD GiftCash;
		BYTE				byRankBattleRemainCount;
	bool				bIsInFreePvpZone;
	bool				bIsScrambleJoinFlag;
	bool				bIsScrambleRewardedFlag;
	BYTE				byHasBattleDragonBallBitFlag;
DWORD unknown;
	DWORD				mascotTblidx;

	DWORD				dwWaguWaguPoints;
	bool				bInvisibleCostume;
BYTE unknown;
}new;
union compare
{
sPC_PROFILE_LOCALIZE   sLocalize;
new nuevo;

}compare;

struct sPC_PROFILE
{
DWORD				tblidx; // pc Å×ÀÌºí ÀÎµ¦½º
	bool				bIsAdult;
	bool				bChangeClass;		// Whether or not have rights to change class
	DWORD			charId;		// PC Ä³¸¯ÅÍÀÇ °íÀ¯ ID(DB index)
	WCHAR				awchName[16 + 1];
	sPC_SHAPE			sPcShape; // pc ¿Ü¾ç ( ¾ó±¼/¸Ó¸®/¸Ó¸®»ö )
	sAVATAR_ATTRIBUTE	avatarAttribute;
	int					curLp;
	WORD				wCurEP;
	WORD				wCurRP;
	BYTE				byCurRPBall;
	int					curAP;
	BYTE				byLevel;
	DWORD				dwCurExp;
	DWORD				dwMaxExpInThisLevel;
	DWORD				dwZenny;
	DWORD				dwTutorialHint;
	BYTE				byBindType;
	DWORD				bindWorldId;
	DWORD				bindObjectTblidx;
	DWORD				dwReputation;
	DWORD				dwMudosaPoint;
	DWORD				dwSpPoint;

	DWORD				charTitle;
	//bool				bInvisibleTitle;
	
	sHOIPOIMIX_DATA		sMixData;
bool				bIsGameMaster;		// true : ¿î¿µÀÚ character


	DWORD				guildId;
	//news
	BYTE type;
	DWORD netp;
	DWORD GiftCash;
	BYTE				byRankBattleRemainCount;
	bool				bIsInFreePvpZone;
	bool				bIsScrambleJoinFlag;
	bool				bIsScrambleRewardedFlag;
	BYTE				byHasBattleDragonBallBitFlag;
	DWORD unknown;
	//BYTE unknown3;
	DWORD				mascotTblidx;

	DWORD				dwWaguWaguPoints;
	bool				bInvisibleCostume;
	BYTE unknown2;
}sPC_PROFILE;

struct sVECTOR3
{
	float x;
	float y;
	float z;
}sVECTOR3;

struct dVECTOR3
{
	int	x;
	int	y;
	int	z;
}dVECTOR3;

struct sSUMMARY_PRIVATESHOP_SHOP_DATA
{
	bool bIsOwnerEmpty; //true�̸� ������ �ڸ��� ����
	BYTE byShopState; //Shop State ����(ePRIVATESHOP_STATE)
	WCHAR wcPrivateShopName[32 + 1];
}sSUMMARY_PRIVATESHOP_SHOP_DATA;// end of struct sSUMMARY_PRIVATESHOP_SHOP_DATA

struct sDBO_SYSTEM_EFFECT_RESULT
{
	DWORD	eResultType;
	float	 Value1;
	float	 Value2;
	float	 Value3;
	float	 Value4;
	float	 Value5;
	float	 Value6;	
}sDBO_SYSTEM_EFFECT_RESULT;

struct sSKILL_RESULT
{
	unsigned int			hTarget;
	BYTE			byAttackResult;		// eBATTLE_ATTACK_RESULT
	sDBO_SYSTEM_EFFECT_RESULT		effectResult[2];
	BYTE							byBlockedAction;		// eDBO_GUARD_TYPE
	DWORD	 unk1;
	sVECTOR3		vShift;
	sVECTOR3		vShift1;
}sSKILL_RESULT;

struct sHTBSKILL_RESULT
{
	BYTE			byStep; // 현재 HTB 스텝
	sSKILL_RESULT	sSkillResult;
}sHTBSKILL_RESULT;

struct sCHARSTATE_SPAWNING
{
	BYTE								unk;		//TODO: what is that value?
	BYTE								byTeleportType;		// eTELEPORT_TYPE	
}sCHARSTATE_SPAWNING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_DESPAWNING
{
	BYTE								unk;		//TODO: what is that value?
	BYTE								byTeleportType;		// eTELEPORT_TYPE	
}sCHARSTATE_DESPAWNING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_STANDING
{
}sCHARSTATE_STANDING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_SITTING
{
}sCHARSTATE_SITTING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_FAINTING
{
	BYTE			byReason; // eFAINT_REASON
}sCHARSTATE_FAINTING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_CAMPING
{
}sCHARSTATE_CAMPING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_LEAVING
{
	BYTE			byLeavingType;	// eCHARLEAVING_TYPE
}sCHARSTATE_LEAVING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_MOVING
{
	DWORD			dwTimeStamp;
	BYTE			byMoveFlag;
	BYTE			byMoveDirection;
}sCHARSTATE_MOVING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_DESTMOVE
{
	DWORD		    dwTimeStamp;
	BYTE            byMoveFlag;
	bool            bHaveSecondDestLoc;
	dVECTOR3	    vSecondDestLoc;
	BYTE			unknown;
	BYTE            byDestLocCount;
	dVECTOR3		avDestLoc[10];
}sCHARSTATE_DESTMOVE;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_FOLLOWING
{
	DWORD			dwTimeStamp;
	BYTE			byMoveFlag;
	unsigned int			hTarget; // 타겟 따라가기일때 따라갈 타겟 핸들
	float			fDistance; // 타겟 앞에서 멈출 거리
	BYTE			byMovementReason; // 공격 or 스킬사용 등의 FOLLOW의 이유를 설정
}sCHARSTATE_FOLLOWING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_FALLING
{
	DWORD			dwTimeStamp;
	BYTE			byMoveDirection;		// ENtlMovementDirection
}sCHARSTATE_FALLING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_DASH_PASSIVE
{
	BYTE			byMoveDirection;		// MOVE_DASH_F, MOVE_DASH_B and so on
	sVECTOR3		vDestLoc;
}sCHARSTATE_DASH_PASSIVE;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_TELEPORTING
{
	BYTE								byTeleportType;		// eTELEPORT_TYPE
}sCHARSTATE_TELEPORTING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_SLIDING
{
	sVECTOR3		vShift;
}sCHARSTATE_SLIDING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_KNOCKDOWN
{
	sVECTOR3		vShift;
}sCHARSTATE_KNOCKDOWN;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_FOCUSING
{
}sCHARSTATE_FOCUSING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_CASTING
{
	unsigned int			skillId;
	unsigned int			hTarget;
	DWORD			dwCastingTime;
	DWORD			dwCastingTimeRemaining;
}sCHARSTATE_CASTING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_SKILL_AFFECTING
{
	unsigned int			skillId;
	unsigned int			hTarget;
}sCHARSTATE_SKILL_AFFECTING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_KEEPING_EFFECT
{
}sCHARSTATE_KEEPING_EFFECT;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_CASTING_ITEM
{
	unsigned int			itemTblidx;
	unsigned int			hTarget;
	DWORD			dwCastingTime;
	DWORD			dwCastingTimeRemaining;
}sCHARSTATE_CASTING_ITEM;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_STUNNED
{
	BYTE			byStunType;		// eDBO_STUN_TYPE
}sCHARSTATE_STUNNED;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_SLEEPING
{
}sCHARSTATE_SLEEPING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_PARALYZED
{
}sCHARSTATE_PARALYZED;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_HTB
{
	unsigned int				HTBId;			// HTB 스킬 ID
	unsigned int				hTarget;		// HTB 타겟 핸들
	BYTE				byStepCount;	// HTB 스텝 개수
	BYTE				byCurStep;		// 현재 스텝
	BYTE				byResultCount;	// HTB 스킬 결과 개수
	sHTBSKILL_RESULT	aHTBSkillResult[10]; // HTB 스킬 결과
}sCHARSTATE_HTB;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_SANDBAG
{
	
}sCHARSTATE_SANDBAG;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_CHARGING
{
}sCHARSTATE_CHARGING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_BLOCKING
{
}sCHARSTATE_BLOCKING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_PRIVATESHOP
{
	sSUMMARY_PRIVATESHOP_SHOP_DATA		sSummaryPrivateShopData;
}sCHARSTATE_PRIVATESHOP;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_DIRECT_PLAY
{
	BYTE				byDirectPlayType; // 연출 타입 ( eDIRECT_PLAY_TYPE )
	unsigned int				directTblidx; // 연출 TBLIDX
}sCHARSTATE_DIRECT_PLAY;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_OPERATING
{
	unsigned int				hTargetObject; // 타겟 오브젝트 핸들
	DWORD				dwOperateTime; // 동작 시간
	unsigned int				directTblidx; // 연출 TBLIDX
}sCHARSTATE_OPERATING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_RIDEON
{
	unsigned int				hTarget; // 타겟 핸들
}sCHARSTATE_RIDEON;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_TURNING
{
	unsigned int				directTblidx; // 연출 TBLIDX
	sVECTOR3			vDestDir;
}sCHARSTATE_TURNING;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_AIR_JUMP
{
	DWORD			dwTimeStamp;
	BYTE			byMoveFlag;
	BYTE			byMoveDirection;
}sCHARSTATE_AIR_JUMP;
//-----------------------------------------------------------------------------------
struct sCHARSTATE_AIR_DASH_ACCEL
{
	BYTE			byMoveDirection;		// MOVE_DASH_F, MOVE_DASH_B and so on	
}sCHARSTATE_AIR_DASH_ACCEL;

union sCHARSTATE_DETAIL
{
	sCHARSTATE_SPAWNING				sCharStateSpawning;
	sCHARSTATE_DESPAWNING			sCharStateDespawning;
	sCHARSTATE_STANDING				sCharStateStanding;
	sCHARSTATE_SITTING				sCharStateSitting;
	sCHARSTATE_FAINTING				sCharStateFainting;
	sCHARSTATE_CAMPING				sCharStateCamping;
	sCHARSTATE_LEAVING				sCharStateLeaving;

	sCHARSTATE_MOVING				sCharStateMoving;
	sCHARSTATE_DESTMOVE				sCharStateDestMove;
	sCHARSTATE_FOLLOWING			sCharStateFollwing;
	sCHARSTATE_FALLING				sCharStateFalling;
	sCHARSTATE_DASH_PASSIVE			sCharStateDashPassive;
	sCHARSTATE_TELEPORTING			sCharStateTeleporting;
	sCHARSTATE_SLIDING				sCharStateSliding;
	sCHARSTATE_KNOCKDOWN			sCharStateKnockdown;

	sCHARSTATE_FOCUSING				sCharStateFocusing;
	sCHARSTATE_CASTING				sCharStateCasting;
	sCHARSTATE_SKILL_AFFECTING		sCharStateSkillAffecting;
	sCHARSTATE_KEEPING_EFFECT		sCharStateKeepingEffect;
	sCHARSTATE_CASTING_ITEM			sCharStateCastingItem;

	sCHARSTATE_STUNNED				sCharStateStunned;
	sCHARSTATE_SLEEPING				sCharStateSleeping;
	sCHARSTATE_PARALYZED			sCharStateParalyzed;

	sCHARSTATE_HTB					sCharStateHTB;
	sCHARSTATE_SANDBAG				sCharStateSandBag;
	sCHARSTATE_CHARGING				sCharStateCharging;

	sCHARSTATE_PRIVATESHOP			sCharStatePrivateShop;//  [7/16/2007]
	sCHARSTATE_DIRECT_PLAY			sCharStateDirectPlay;
	sCHARSTATE_OPERATING			sCharStateOperating;
	sCHARSTATE_RIDEON				sCharStateRideOn;
	sCHARSTATE_TURNING				sCharStateTurning;
	sCHARSTATE_AIR_JUMP				sCharStateAirJump;
	sCHARSTATE_AIR_DASH_ACCEL		sCharStateAirDashAccel;

}sCHARSTATE_DETAIL;

struct sASPECTSTATE_SUPER_SAIYAN
{
	BYTE				bySourceGrade;
}sASPECTSTATE_SUPER_SAIYAN;
//-----------------------------------------------------------------------------------
struct sASPECTSTATE_PURE_MAJIN
{
	BYTE				bySourceGrade;
}sASPECTSTATE_PURE_MAJIN;
//-----------------------------------------------------------------------------------
struct sASPECTSTATE_GREAT_NAMEK
{
	BYTE				bySourceGrade;
}sASPECTSTATE_GREAT_NAMEK;
//-----------------------------------------------------------------------------------
struct sASPECTSTATE_KAIOKEN
{
	BYTE				bySourceGrade;
	BYTE				byRepeatingCount;
}sASPECTSTATE_KAIOKEN;
//-----------------------------------------------------------------------------------
struct sASPECTSTATE_SPINNING_ATTACK
{
}sASPECTSTATE_SPINNING_ATTACK;
//-----------------------------------------------------------------------------------
struct sASPECTSTATE_VEHICLE
{	
	unsigned int		idVehicleTblidx;
	unsigned int		hVehicleItem;
	bool		bIsEngineOn;
}sASPECTSTATE_VEHICLE;

union sASPECTSTATE_DETAIL
{
	sASPECTSTATE_SUPER_SAIYAN		sSuperSaiyan;
	sASPECTSTATE_PURE_MAJIN			sPureMajin;
	sASPECTSTATE_GREAT_NAMEK		sGreatNamek;
	sASPECTSTATE_KAIOKEN			sKaioken;
	sASPECTSTATE_SPINNING_ATTACK	sSpinningAttack;
	sASPECTSTATE_VEHICLE			sVehicle;
	//BYTE							unknown[9];
}sASPECTSTATE_DETAIL;

struct sASPECTSTATE_BASE
{
	BYTE							byAspectStateId;
}sASPECTSTATE_BASE;

struct sASPECTSTATE
{
	sASPECTSTATE_BASE				sAspectStateBase;
	sASPECTSTATE_DETAIL				sAspectStateDetail;
}sASPECTSTATE;

struct sCHARSTATE_BASE
{
	BYTE			byStateID;
	DWORD			dwStateTime;
	unsigned __int64		dwConditionFlag;
	sASPECTSTATE	aspectState;
	bool			isFighting;

	sVECTOR3		vCurLoc;
	sVECTOR3		vCurDir;
	bool			isFlying;
}sCHARSTATE_BASE;

struct sCHARSTATE
{
	sCHARSTATE_BASE				sCharStateBase;
	sCHARSTATE_DETAIL			sCharStateDetail;
}sCHARSTATE;



struct GU_AVATAR_CHAR_INFO2
{
WORD size;
WORD opcode;
	DWORD			handle;
	BYTE			byPlayerMaxLevel;
	sPC_PROFILE		sPcProfile;
	WORD			wCharStateSize;
	sCHARSTATE		sCharState;
};